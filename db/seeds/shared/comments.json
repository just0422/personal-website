{
	"records": [
		{
			"sprig_id": 1,
			"content": "Constructed a Django REST API that utilzied all four CRUD"
		},
		{
			"sprig_id": 2,
			"content": "Ensured application functionality through automated unit testing framework for models and views"
		},
		{
			"sprig_id": 3,
			"content": "Embraced MVT design pattern with class-based generic views"
		},
		{
			"sprig_id": 4,
			"content": "Utilized redux principles and framework to construct a single page front end ReactJs application that queried REST API for all necessary actions"
		},
		{
			"sprig_id": 5,
			"content": "Overrode standard django administration page layout with a custom template"
		},
		{
			"sprig_id": 11,
			"content": "Organized a cloud infrastructure using 36 private virtual machines and sharded MongoDB database to ensure minimal response time for heavy query loads"
		},
		{
			"sprig_id": 13,
			"content": "Configured Nginx as public facing load balancer"
		},
		{
			"sprig_id": 14,
			"content": "Utilized PHP and Javascript to create an application server that rendered a user interface"
		},
		{
			"sprig_id": 15,
			"content": "Facilitated communication between frontend servers and application servers through RabbitMQ server"
		},
		{
			"sprig_id": 16,
			"content": "Developed proprietary Ruby on Rails software to create, query, update, or destroy customer data and maintain/evaluate constraints for product deployment"
		},
		{
			"sprig_id": 17,
			"content": "Implemented MVC design pattern so that Javascript could query the database & dynamically update 5 Ruby On Rails HTML ERB templates accordingly"
		},
		{
			"sprig_id": 19,
			"content": "Held 1-on-1 office hours to review course topics such as: architecture, assembly code, and basic operating system principles"
		},
		{
			"sprig_id": 20,
			"content": "Instructed weekly recitations of about 30 students and monthly review sessions of over 200 students"
		},
		{
			"sprig_id": 21,
			"content": "Developed plugins for & performed customizations on the MARS assembly simulator"
		},
		{
			"sprig_id": 22,
			"content": "Designed & implemented robust automated grading script for C programs in python, which include extensive input sanitizing & solution generation"
		},
		{
			"sprig_id": 23,
			"content": "Developed interactive Reactjs web application with Ruby on Rails REST API deployed onto an Nginx server."
		},
		{
			"sprig_id": 24,
			"content": "Utilized shrine image processing library to handle file uploads and deliver images and thumbnails to the front end application"
		},
		{
			"sprig_id": 25,
			"content": "Scheduled a cron job to clean up and reset all supporting databases for live demos running on the same server as this project"
		},
		{
			"sprig_id": 27,
			"content": "Periodically rotated through different company technology stacks, such as Angular/Typescript/Java/SQL Server, C#/RabbitMQ/MongoDB, and AngularJs/NodeJs/MySQL acquiring new skills and conforming to different team standards and styles"
		},
		{
			"sprig_id": 28,
			"content": "Introduced a full stack internal web application that extracted ticket data from company Jira database and displayed estimated completion times in an easy-to-understand GUI to determine the number of developers needed per customer, product, and release in the past and future"
		},
		{
			"sprig_id": 29,
			"content": "Created a .NET C# Windows Form in Visual Studio for converting between database formats that were generated by one product and required by another."
		},
		{
			"sprig_id": 30,
			"content": "Completed a Python script to download data from one website’s backend API, extract important details, reformat them and import into another’s API"
		},
		{
			"sprig_id": 31,
			"content": "Introduced UX features and expanded configuration APIs to a Angular web application to enable increased user-defined configurations to various levels of the product stack"
		},
		{
			"sprig_id": 32,
			"content": "Designed and implemented a full stack Angular / Java / SQL Server web application that modified the configuration and style of another web application in real time"
		},
		{
			"sprig_id": 33,
			"content": "Launched a new product with a team of 4 developers which captured data from public data feeds and distributed relevant information to appropriate internal RabbitMQ message broker"
		},
		{
			"sprig_id": 34,
			"content": "Using python requests library, successfully implemented workflows for sending GET requests to Oauth1 authenticated API and submitting POST/PATCH requests to Oauth2 authentication api"
		},
		{
			"sprig_id": 35,
			"content": "Developed interactive Reactjs web application with Flask REST API deployed onto an Nginx server."
		},
		{
			"sprig_id": 36,
			"content": "Queried WHOIS top level domain name servers to determine domain name availability"
		},
		{
			"sprig_id": 37,
			"content": "Created a multi-threaded Flask MVC web application deployed onto an Nginx server"
		},
		{
			"sprig_id": 38,
			"content": "Divided time consuming tasks into multiple threads to minimize response time to the browser"
		},
		{
			"sprig_id": 39,
			"content": "Upon user submission, the application published messages to appropriate rabbitmq queues"
		},
		{
			"sprig_id": 40,
			"content": "Child threads subscribed to relevant rabbitmq queue to update a user’s profile via API, send an email, and log results to file"
		},
		{
			"sprig_id": 41,
			"content": "Established a weekly cron job that regulates the size of the log file"
		}
	]
}
